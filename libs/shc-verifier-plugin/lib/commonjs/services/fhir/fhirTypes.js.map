{"version":3,"names":["RecordType","ResourceType","availableRecordTypes","immunization","covid19LabResult","acceptedVCType","getRecordTypeFromPayload","fhirJWSPayload","res","unknown","types","vc","type","Array","isArray","i","length","recordType","_","intersection","sort","isResourceType","entry","resourceType","resource","toLowerCase"],"sources":["fhirTypes.ts"],"sourcesContent":["import _ from 'lodash'\nimport type {JWSPayload, BundleEntry } from './types'\nexport const enum RecordType {\n  'unknown'='unknown',\n  'immunization' = 'immunization',\n  'covid19LabResult'    = 'covid19-lab-result'\n}\n\nexport const enum ResourceType {\n  Unknown      = 'Unknown',\n  Immunization = 'Immunization',\n  Patient      = 'Patient',\n  Observation  = 'Observation'\n}\n\nexport const availableRecordTypes: RecordType[] = [ \n  RecordType.immunization,\n  RecordType.covid19LabResult\n]\nexport const acceptedVCType: Record<string, string[]> = {\n  [RecordType.immunization]: [  \n    'https://smarthealth.cards#immunization',\n    'https://smarthealth.cards#health-card'],\n  [RecordType.covid19LabResult]: [               \n    'https://smarthealth.cards#laboratory',\n    'https://smarthealth.cards#covid19',\n    'https://smarthealth.cards#health-card']\n}\n\n/* this will check if it's validatable types per payload. \n   it also assumes that per each payload it has one record type\n   exclusively, or it fallback to unknown.\n*/\nexport function getRecordTypeFromPayload ( fhirJWSPayload: JWSPayload ): RecordType  {\n  let res = RecordType.unknown\n  const types = fhirJWSPayload?.vc?.type\n  if ( Array.isArray( types ) ) {\n    for ( let i=0; i < availableRecordTypes.length; i++ ) {\n      const recordType = acceptedVCType[availableRecordTypes[i]]\n      if ( _.intersection(types.sort(), recordType.sort()).length === recordType.length ){\n        res = availableRecordTypes[i]\n        break\n      }\n    } \n  }\n  return res\n}\n\nexport function isResourceType ( entry: BundleEntry, resourceType: ResourceType ): boolean {\n  return ( entry?.resource?.resourceType.toLowerCase() === resourceType.toLowerCase() )\n}\n"],"mappings":";;;;;;;;AAAA;AAAsB;AAAA,IAEJA,UAAU;AAAA;AAAA,WAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;AAAA,GAAVA,UAAU,0BAAVA,UAAU;AAAA,IAMVC,YAAY;AAAA;AAAA,WAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;AAAA,GAAZA,YAAY,4BAAZA,YAAY;AAOvB,MAAMC,oBAAkC,GAAG,CAChDF,UAAU,CAACG,YAAY,EACvBH,UAAU,CAACI,gBAAgB,CAC5B;AAAA;AACM,MAAMC,cAAwC,GAAG;EACtD,CAACL,UAAU,CAACG,YAAY,GAAG,CACzB,wCAAwC,EACxC,uCAAuC,CAAC;EAC1C,CAACH,UAAU,CAACI,gBAAgB,GAAG,CAC7B,sCAAsC,EACtC,mCAAmC,EACnC,uCAAuC;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AAHA;AAIO,SAASE,wBAAwB,CAAGC,cAA0B,EAAgB;EAAA;EACnF,IAAIC,GAAG,GAAGR,UAAU,CAACS,OAAO;EAC5B,MAAMC,KAAK,GAAGH,cAAc,aAAdA,cAAc,6CAAdA,cAAc,CAAEI,EAAE,uDAAlB,mBAAoBC,IAAI;EACtC,IAAKC,KAAK,CAACC,OAAO,CAAEJ,KAAK,CAAE,EAAG;IAC5B,KAAM,IAAIK,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAGb,oBAAoB,CAACc,MAAM,EAAED,CAAC,EAAE,EAAG;MACpD,MAAME,UAAU,GAAGZ,cAAc,CAACH,oBAAoB,CAACa,CAAC,CAAC,CAAC;MAC1D,IAAKG,eAAC,CAACC,YAAY,CAACT,KAAK,CAACU,IAAI,EAAE,EAAEH,UAAU,CAACG,IAAI,EAAE,CAAC,CAACJ,MAAM,KAAKC,UAAU,CAACD,MAAM,EAAE;QACjFR,GAAG,GAAGN,oBAAoB,CAACa,CAAC,CAAC;QAC7B;MACF;IACF;EACF;EACA,OAAOP,GAAG;AACZ;AAEO,SAASa,cAAc,CAAGC,KAAkB,EAAEC,YAA0B,EAAY;EAAA;EACzF,OAAS,CAAAD,KAAK,aAALA,KAAK,0CAALA,KAAK,CAAEE,QAAQ,oDAAf,gBAAiBD,YAAY,CAACE,WAAW,EAAE,MAAKF,YAAY,CAACE,WAAW,EAAE;AACrF"}