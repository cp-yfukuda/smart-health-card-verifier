{"version":3,"names":["RecordType","ResourceType","availableRecordTypes","covid19Immunization","covid19LabResult","acceptedVCType","getRecordTypeFromPayload","fhirJWSPayload","res","unknown","types","vc","type","Array","isArray","i","length","recordType","_","intersection","sort","isResourceType","entry","resourceType","resource","toLowerCase"],"sources":["fhirTypes.ts"],"sourcesContent":["import _ from 'lodash'\nimport type {JWSPayload, BundleEntry } from './types'\nexport const enum RecordType {\n  'unknown'='unknown',\n  'covid19Immunization' = 'covid19-immunization',\n  'covid19LabResult'    = 'covid19-lab-result'\n}\n\nexport const enum ResourceType {\n  Unknown      = 'Unknown',\n  Immunization = 'Immunization',\n  Patient      = 'Patient',\n  Observation  = 'Observation'\n}\n\nexport const availableRecordTypes: RecordType[] = [ \n  RecordType.covid19Immunization,\n  RecordType.covid19LabResult\n]\nexport const acceptedVCType: Record<string, string[]> = {\n  [RecordType.covid19Immunization]: [  \n    'https://smarthealth.cards#immunization',\n    'https://smarthealth.cards#covid19',\n    'https://smarthealth.cards#health-card'],\n  [RecordType.covid19LabResult]: [               \n    'https://smarthealth.cards#laboratory',\n    'https://smarthealth.cards#covid19',\n    'https://smarthealth.cards#health-card']\n}\n\n/* this will check if it's validatable types per payload. \n   it also assumes that per each payload it has one record type\n   exclusively, or it fallback to unknown.\n*/\nexport function getRecordTypeFromPayload ( fhirJWSPayload: JWSPayload ): RecordType  {\n  let res = RecordType.unknown\n  const types = fhirJWSPayload?.vc?.type\n  if ( Array.isArray( types ) ) {\n    for ( let i=0; i < availableRecordTypes.length; i++ ) {\n      const recordType = acceptedVCType[availableRecordTypes[i]]\n      if ( _.intersection(types.sort(), recordType.sort()).length === recordType.length ){\n        res = availableRecordTypes[i]\n        break\n      }\n    } \n  }\n  return res\n}\n\nexport function isResourceType ( entry: BundleEntry, resourceType: ResourceType ): boolean {\n  return ( entry?.resource?.resourceType.toLowerCase() === resourceType.toLowerCase() )\n}\n"],"mappings":";;;;;;;;;AAAA;;;;IAEkBA,U;;;WAAAA,U;EAAAA,U;EAAAA,U;EAAAA,U;GAAAA,U,0BAAAA,U;;IAMAC,Y;;;WAAAA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,4BAAAA,Y;;AAOX,MAAMC,oBAAkC,GAAG,CAChDF,UAAU,CAACG,mBADqC,EAEhDH,UAAU,CAACI,gBAFqC,CAA3C;;AAIA,MAAMC,cAAwC,GAAG;EACtD,CAACL,UAAU,CAACG,mBAAZ,GAAkC,CAChC,wCADgC,EAEhC,mCAFgC,EAGhC,uCAHgC,CADoB;EAKtD,CAACH,UAAU,CAACI,gBAAZ,GAA+B,CAC7B,sCAD6B,EAE7B,mCAF6B,EAG7B,uCAH6B;AALuB,CAAjD;AAWP;AACA;AACA;AACA;;;;AACO,SAASE,wBAAT,CAAoCC,cAApC,EAA8E;EAAA;;EACnF,IAAIC,GAAG,GAAGR,UAAU,CAACS,OAArB;EACA,MAAMC,KAAK,GAAGH,cAAH,aAAGA,cAAH,6CAAGA,cAAc,CAAEI,EAAnB,uDAAG,mBAAoBC,IAAlC;;EACA,IAAKC,KAAK,CAACC,OAAN,CAAeJ,KAAf,CAAL,EAA8B;IAC5B,KAAM,IAAIK,CAAC,GAAC,CAAZ,EAAeA,CAAC,GAAGb,oBAAoB,CAACc,MAAxC,EAAgDD,CAAC,EAAjD,EAAsD;MACpD,MAAME,UAAU,GAAGZ,cAAc,CAACH,oBAAoB,CAACa,CAAD,CAArB,CAAjC;;MACA,IAAKG,eAAA,CAAEC,YAAF,CAAeT,KAAK,CAACU,IAAN,EAAf,EAA6BH,UAAU,CAACG,IAAX,EAA7B,EAAgDJ,MAAhD,KAA2DC,UAAU,CAACD,MAA3E,EAAmF;QACjFR,GAAG,GAAGN,oBAAoB,CAACa,CAAD,CAA1B;QACA;MACD;IACF;EACF;;EACD,OAAOP,GAAP;AACD;;AAEM,SAASa,cAAT,CAA0BC,KAA1B,EAA8CC,YAA9C,EAAoF;EAAA;;EACzF,OAAS,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEE,QAAP,oEAAiBD,YAAjB,CAA8BE,WAA9B,QAAgDF,YAAY,CAACE,WAAb,EAAzD;AACD"}