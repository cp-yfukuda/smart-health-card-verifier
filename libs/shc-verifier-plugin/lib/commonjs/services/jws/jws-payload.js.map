{"version":3,"names":["schema","jwsPayloadSchema","validate","jwsPayloadText","trim","console","log","ErrorCode","TRAILING_CHARACTERS","jwsPayload","Utils","parseJson","isJwsPayloadValid","checkJwsPayload","Promise","reject","fhirBundleJson","vc","credentialSubject","fhirBundle","recordType","getRecordTypeFromPayload","JSON_PARSE_ERROR","nbf","Date","setTime","now","getTime","dateParsedInMilliseconds","toUTCString","NOT_YET_VALID","type","includes","SCHEMA_ERROR","InvalidError","CRITICAL_DATA_MISSING"],"sources":["jws-payload.ts"],"sourcesContent":["import { ErrorCode, Utils, InvalidError } from 'verifier-sdk'\nimport jwsPayloadSchema from '../../schemas/smart-health-card-vc-schema.json'\nimport * as fhirBundle from '../fhir/fhirBundle'\nimport { getRecordTypeFromPayload, RecordType } from '../fhir/fhirTypes'\nimport type { JWSPayload } from '../fhir/types' \nexport const schema = jwsPayloadSchema\n\n\nexport async function validate (jwsPayloadText: string): Promise< boolean > {\n  if (jwsPayloadText.trim() !== jwsPayloadText) {\n    console.log('JWS payload has leading or trailing spaces', ErrorCode.TRAILING_CHARACTERS)\n    jwsPayloadText = jwsPayloadText.trim()\n  }\n\n  const jwsPayload = Utils.parseJson<JWSPayload>(jwsPayloadText)\n  const isJwsPayloadValid = checkJwsPayload(jwsPayload)\n  if (!isJwsPayloadValid) return Promise.reject(false)\n \n  const fhirBundleJson = jwsPayload?.vc.credentialSubject.fhirBundle\n    \n  const recordType: RecordType = getRecordTypeFromPayload(jwsPayload as JWSPayload)\n  return fhirBundle.validate(recordType, fhirBundleJson)\n}\n\nfunction checkJwsPayload (jwsPayload: JWSPayload | undefined) {\n  if (!jwsPayload || typeof jwsPayload !== 'object') {\n    console.log('Failed to parse JWS.payload data as JSON.', ErrorCode.JSON_PARSE_ERROR)\n    return false\n  }\n  // validate issuance date\n  const nbf = new Date()\n  nbf.setTime(jwsPayload.nbf * 1000) // convert seconds to milliseconds\n  const now = new Date()\n\n  if (nbf > now) {\n    if (jwsPayload.nbf > new Date(2021, 1, 1).getTime()) {\n      // we will assume the nbf was encoded in milliseconds, and we will return an error\n      const dateParsedInMilliseconds = new Date()\n      dateParsedInMilliseconds.setTime(jwsPayload.nbf)\n      console.log(\n        `Health card is not yet valid, nbf=${jwsPayload.nbf} (${nbf.toUTCString()}).\\n` +\n          'nbf should be encoded in seconds since 1970-01-01T00:00:00Z UTC.\\n' +\n          `Did you encode the date in milliseconds, which would give the date: ${dateParsedInMilliseconds.toUTCString()}?`,\n        ErrorCode.NOT_YET_VALID,\n      )\n    } else {\n      console.log(\n        `Health card is not yet valid, nbf=${jwsPayload.nbf} (${nbf.toUTCString()}).`,\n        ErrorCode.NOT_YET_VALID,\n      )\n    }\n  }\n\n  if (\n    !jwsPayload.vc.type ||\n    !jwsPayload.vc.type.includes('https://smarthealth.cards#health-card')\n  ) {\n    console.log(\n      \"JWS.payload.vc.type should contain 'https://smarthealth.cards#health-card'\",\n      ErrorCode.SCHEMA_ERROR,\n    )\n    throw new InvalidError(  ErrorCode.SCHEMA_ERROR )\n  }\n\n  // to continue validation, we must have a FHIR bundle string to validate\n  if (\n    !jwsPayload.vc ||\n    !jwsPayload.vc.credentialSubject ||\n    !jwsPayload.vc.credentialSubject.fhirBundle\n  ) {\n    // The schema check above will list the expected properties/type\n    console.log(\n      'JWS.payload.vc.credentialSubject.fhirBundle{} required to continue.',\n      ErrorCode.CRITICAL_DATA_MISSING,\n    )\n    return false\n  }\n  return true\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,MAAM,GAAGC,gCAAf;;;AAGA,eAAeC,QAAf,CAAyBC,cAAzB,EAAqE;EAC1E,IAAIA,cAAc,CAACC,IAAf,OAA0BD,cAA9B,EAA8C;IAC5CE,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DC,sBAAA,CAAUC,mBAApE;IACAL,cAAc,GAAGA,cAAc,CAACC,IAAf,EAAjB;EACD;;EAED,MAAMK,UAAU,GAAGC,kBAAA,CAAMC,SAAN,CAA4BR,cAA5B,CAAnB;;EACA,MAAMS,iBAAiB,GAAGC,eAAe,CAACJ,UAAD,CAAzC;EACA,IAAI,CAACG,iBAAL,EAAwB,OAAOE,OAAO,CAACC,MAAR,CAAe,KAAf,CAAP;EAExB,MAAMC,cAAc,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEQ,EAAZ,CAAeC,iBAAf,CAAiCC,UAAxD;EAEA,MAAMC,UAAsB,GAAG,IAAAC,mCAAA,EAAyBZ,UAAzB,CAA/B;EACA,OAAOU,UAAU,CAACjB,QAAX,CAAoBkB,UAApB,EAAgCJ,cAAhC,CAAP;AACD;;AAED,SAASH,eAAT,CAA0BJ,UAA1B,EAA8D;EAC5D,IAAI,CAACA,UAAD,IAAe,OAAOA,UAAP,KAAsB,QAAzC,EAAmD;IACjDJ,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDC,sBAAA,CAAUe,gBAAnE;IACA,OAAO,KAAP;EACD,CAJ2D,CAK5D;;;EACA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;EACAD,GAAG,CAACE,OAAJ,CAAYhB,UAAU,CAACc,GAAX,GAAiB,IAA7B,EAP4D,CAOzB;;EACnC,MAAMG,GAAG,GAAG,IAAIF,IAAJ,EAAZ;;EAEA,IAAID,GAAG,GAAGG,GAAV,EAAe;IACb,IAAIjB,UAAU,CAACc,GAAX,GAAiB,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBG,OAArB,EAArB,EAAqD;MACnD;MACA,MAAMC,wBAAwB,GAAG,IAAIJ,IAAJ,EAAjC;MACAI,wBAAwB,CAACH,OAAzB,CAAiChB,UAAU,CAACc,GAA5C;MACAlB,OAAO,CAACC,GAAR,CACG,qCAAoCG,UAAU,CAACc,GAAI,KAAIA,GAAG,CAACM,WAAJ,EAAkB,MAA1E,GACE,oEADF,GAEG,uEAAsED,wBAAwB,CAACC,WAAzB,EAAuC,GAHlH,EAIEtB,sBAAA,CAAUuB,aAJZ;IAMD,CAVD,MAUO;MACLzB,OAAO,CAACC,GAAR,CACG,qCAAoCG,UAAU,CAACc,GAAI,KAAIA,GAAG,CAACM,WAAJ,EAAkB,IAD5E,EAEEtB,sBAAA,CAAUuB,aAFZ;IAID;EACF;;EAED,IACE,CAACrB,UAAU,CAACQ,EAAX,CAAcc,IAAf,IACA,CAACtB,UAAU,CAACQ,EAAX,CAAcc,IAAd,CAAmBC,QAAnB,CAA4B,uCAA5B,CAFH,EAGE;IACA3B,OAAO,CAACC,GAAR,CACE,4EADF,EAEEC,sBAAA,CAAU0B,YAFZ;IAIA,MAAM,IAAIC,yBAAJ,CAAmB3B,sBAAA,CAAU0B,YAA7B,CAAN;EACD,CAtC2D,CAwC5D;;;EACA,IACE,CAACxB,UAAU,CAACQ,EAAZ,IACA,CAACR,UAAU,CAACQ,EAAX,CAAcC,iBADf,IAEA,CAACT,UAAU,CAACQ,EAAX,CAAcC,iBAAd,CAAgCC,UAHnC,EAIE;IACA;IACAd,OAAO,CAACC,GAAR,CACE,qEADF,EAEEC,sBAAA,CAAU4B,qBAFZ;IAIA,OAAO,KAAP;EACD;;EACD,OAAO,IAAP;AACD"}