{"version":3,"names":["jose","ErrorCode","InvalidError","KeysStore","addIfKeyIsValidSHCFormat","key","kid","console","log","INVALID_KEY_PRIVATE","keyName","String","d","alg","INVALID_KEY_SCHEMA","INVALID_KEY_WRONG_ALG","kty","INVALID_KEY_WRONG_KTY","use","INVALID_KEY_WRONG_USE","jwkKey","store","add","tpDigest","thumbprint","util","base64url","encode","INVALID_KEY_WRONG_KID","error","err","message","INVALID_KEY_UNKNOWN","verifyAndImportHealthCardIssuerKey","keySet","Object","keys","Array","i","length","debug"],"sources":["shcKeyValidator.ts"],"sourcesContent":["import jose, { JWK } from 'react-native-jose'\nimport { ErrorCode, InvalidError } from 'verifier-sdk'\nimport { KeySet, KeysStore } from './keys'\n\nconst addIfKeyIsValidSHCFormat = async ( key: JWK.Key ): Promise< boolean > => {\n  if ( ! key.kid || typeof key.kid !== 'string') {\n    console.log(\n      'key does not contain kid field',\n      ErrorCode.INVALID_KEY_PRIVATE,\n    )\n    return false\n  }\n  const keyName = `key[${String(key.kid)}]`\n\n  // check for private key material (as to happen before the following store.add, because the returned\n  // value will be the corresponding public key)\n  // Note: this is RSA/ECDSA specific, but ok since ECDSA is mandated\n  if ((key as JWK.Key & { d: string }).d) {\n    console.log(\n      `${keyName}: key contains private key material.`,\n      ErrorCode.INVALID_KEY_PRIVATE,\n    )\n    return false\n  }\n  // check that EC curve is 'ES256'\n  if (!key.alg) {\n    console.log(keyName + ': ' + \"'alg' missing in issuer key\", ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.alg !== 'ES256') {\n    console.log(\n      `${keyName}: wrong algorithm in issuer key. expected: 'ES256', actual: ${String(key.alg)}`,\n      ErrorCode.INVALID_KEY_WRONG_ALG,\n    )\n    return false\n  }\n\n  // check that key type is 'EC'\n  if (!key.kty) {\n    console.log(`${keyName}:'kty' missing in issuer key`, ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.kty !== 'EC') {\n    console.log(\n      `${keyName}:wrong key type in issuer key. expected: 'EC', actual: ${String( key.kty)} `,\n      ErrorCode.INVALID_KEY_WRONG_KTY,\n    )\n    return false\n  }\n\n  // check that usage is 'sig'\n  if (!key.use) {\n    console.log(`${keyName}:'use' missing in issuer key`, ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.use !== 'sig') {\n    console.log(\n      `${keyName}:wrong usage in issuer key. expected: 'sig', actual: ${String(key.use)}`,\n      ErrorCode.INVALID_KEY_WRONG_USE,\n    )\n    return false\n  }\n  try {\n    const jwkKey = await KeysStore.store.add(key)\n    const tpDigest: any = await jwkKey.thumbprint('SHA-256')\n    const thumbprint = jose.util.base64url.encode(tpDigest)\n    console.log(\"jwkThumbprint : \" + thumbprint )\n    if (key.kid !== thumbprint) {\n      console.log(\n        `${keyName}:'kid' does not match thumbprint in issuer key. expected: \\\n                    ${String( thumbprint )} , actual: ${String(key.kid)}`,\n        ErrorCode.INVALID_KEY_WRONG_KID,\n      )\n      jwkKey.error = new InvalidError(ErrorCode.INVALID_KEY_WRONG_KID)\n      return false\n    }\n\n  } catch ( err: any ){\n    console.log(\n      `${keyName}: Failed to calculate issuer key thumbprint : ${ String( err.message )}`,\n      ErrorCode.INVALID_KEY_UNKNOWN,\n    )\n    return false\n  }\n  return true\n}\n\nexport const verifyAndImportHealthCardIssuerKey = async (\n  keySet: KeySet\n): Promise<any> => {\n  // check that keySet is valid\n  if (!(keySet instanceof Object) || !keySet.keys || !(keySet.keys instanceof Array)) {\n    console.log('keySet not valid. Expect {keys : JWK.Key[]}', ErrorCode.INVALID_KEY_SCHEMA)\n    return\n  }\n  for (let i = 0; i < keySet.keys.length; i++) {\n    const key: JWK.Key = keySet.keys[i]\n    try {\n      if ( await addIfKeyIsValidSHCFormat( key ) ) {\n        console.debug(`Key [${String(i)}] added : `)\n      } else {\n        console.debug(`Key [${String(i)}] is not added`)\n      }\n    } catch (error) {\n      console.log(\n        'Error adding key to keyStore : ' + (error as Error).message,\n        ErrorCode.INVALID_KEY_UNKNOWN,\n      )\n    }\n  }\n  \n}\n"],"mappings":"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"}