{"version":3,"names":["jose","ErrorCode","InvalidError","KeysStore","addIfKeyIsValidSHCFormat","key","kid","console","log","INVALID_KEY_PRIVATE","keyName","String","d","alg","INVALID_KEY_SCHEMA","INVALID_KEY_WRONG_ALG","kty","INVALID_KEY_WRONG_KTY","use","INVALID_KEY_WRONG_USE","jwkKey","store","add","tpDigest","thumbprint","util","base64url","encode","INVALID_KEY_WRONG_KID","error","err","INVALID_KEY_UNKNOWN","verifyAndImportHealthCardIssuerKey","keySet","Object","keys","Array","i","length","debug","message"],"sources":["shcKeyValidator.ts"],"sourcesContent":["import jose, { JWK } from 'node-jose'\nimport { ErrorCode, InvalidError } from 'verifier-sdk'\nimport { KeySet, KeysStore } from './keys'\n\nconst addIfKeyIsValidSHCFormat = async ( key: JWK.Key ): Promise< boolean > => {\n  if ( ! key.kid || typeof key.kid !== 'string') {\n    console.log(\n      'key does not contain kid field',\n      ErrorCode.INVALID_KEY_PRIVATE,\n    )\n    return false\n  }\n  const keyName = `key[${String(key.kid)}]`\n\n  // check for private key material (as to happen before the following store.add, because the returned\n  // value will be the corresponding public key)\n  // Note: this is RSA/ECDSA specific, but ok since ECDSA is mandated\n  if ((key as JWK.Key & { d: string }).d) {\n    console.log(\n      `${keyName}: key contains private key material.`,\n      ErrorCode.INVALID_KEY_PRIVATE,\n    )\n    return false\n  }\n  // check that EC curve is 'ES256'\n  if (!key.alg) {\n    console.log(keyName + ': ' + \"'alg' missing in issuer key\", ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.alg !== 'ES256') {\n    console.log(\n      `${keyName}: wrong algorithm in issuer key. expected: 'ES256', actual: ${String(key.alg)}`,\n      ErrorCode.INVALID_KEY_WRONG_ALG,\n    )\n    return false\n  }\n\n  // check that key type is 'EC'\n  if (!key.kty) {\n    console.log(`${keyName}:'kty' missing in issuer key`, ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.kty !== 'EC') {\n    console.log(\n      `${keyName}:wrong key type in issuer key. expected: 'EC', actual: ${String( key.kty)} `,\n      ErrorCode.INVALID_KEY_WRONG_KTY,\n    )\n    return false\n  }\n\n  // check that usage is 'sig'\n  if (!key.use) {\n    console.log(`${keyName}:'use' missing in issuer key`, ErrorCode.INVALID_KEY_SCHEMA)\n    return false\n  } else if (key.use !== 'sig') {\n    console.log(\n      `${keyName}:wrong usage in issuer key. expected: 'sig', actual: ${String(key.use)}`,\n      ErrorCode.INVALID_KEY_WRONG_USE,\n    )\n    return false\n  }\n  try {\n    const jwkKey = await KeysStore.store.add(key)\n    const tpDigest: any = await jwkKey.thumbprint('SHA-256')\n    const thumbprint = jose.util.base64url.encode(tpDigest)\n    if (key.kid !== thumbprint) {\n      console.log(\n        `${keyName}:'kid' does not match thumbprint in issuer key. expected: \\\n                    ${String( thumbprint )} , actual: ${String(key.kid)}`,\n        ErrorCode.INVALID_KEY_WRONG_KID,\n      )\n      jwkKey.error = new InvalidError(ErrorCode.INVALID_KEY_WRONG_KID)\n      return false\n    }\n\n  } catch ( err: any ){\n    console.log(\n      `${keyName}: Failed to calculate issuer key thumbprint : ${ err }`,\n      ErrorCode.INVALID_KEY_UNKNOWN,\n    )\n    return false\n  }\n  return true\n}\n\nexport const verifyAndImportHealthCardIssuerKey = async (\n  keySet: KeySet\n): Promise<any> => {\n  // check that keySet is valid\n  if (!(keySet instanceof Object) || !keySet.keys || !(keySet.keys instanceof Array)) {\n    console.log('keySet not valid. Expect {keys : JWK.Key[]}', ErrorCode.INVALID_KEY_SCHEMA)\n    return\n  }\n  for (let i = 0; i < keySet.keys.length; i++) {\n    const key: JWK.Key = keySet.keys[i]\n    try {\n      if ( await addIfKeyIsValidSHCFormat( key ) ) {\n        console.debug(`Key [${String(i)}] added : `)\n      } else {\n        console.debug(`Key [${String(i)}] is not added`)\n      }\n    } catch (error) {\n      console.log(\n        'Error adding key to keyStore : ' + (error as Error).message,\n        ErrorCode.INVALID_KEY_UNKNOWN,\n      )\n    }\n  }\n  \n}\n"],"mappings":"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"}