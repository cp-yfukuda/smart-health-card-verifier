{"version":3,"names":["ErrorCode","Utils","InvalidError","jwsPayloadSchema","fhirBundle","getRecordTypeFromPayload","schema","validate","jwsPayloadText","trim","console","log","TRAILING_CHARACTERS","jwsPayload","parseJson","isJwsPayloadValid","checkJwsPayload","Promise","reject","fhirBundleJson","vc","credentialSubject","recordType","JSON_PARSE_ERROR","nbf","Date","setTime","now","getTime","dateParsedInMilliseconds","toUTCString","NOT_YET_VALID","type","includes","SCHEMA_ERROR","CRITICAL_DATA_MISSING"],"sources":["jws-payload.ts"],"sourcesContent":["import { ErrorCode, Utils, InvalidError } from 'verifier-sdk'\nimport jwsPayloadSchema from '../../schemas/smart-health-card-vc-schema.json'\nimport * as fhirBundle from '../fhir/fhirBundle'\nimport { getRecordTypeFromPayload, RecordType } from '../fhir/fhirTypes'\nimport type { JWSPayload } from '../fhir/types' \nexport const schema = jwsPayloadSchema\n\n\nexport async function validate (jwsPayloadText: string): Promise< boolean > {\n  if (jwsPayloadText.trim() !== jwsPayloadText) {\n    console.log('JWS payload has leading or trailing spaces', ErrorCode.TRAILING_CHARACTERS)\n    jwsPayloadText = jwsPayloadText.trim()\n  }\n\n  const jwsPayload = Utils.parseJson<JWSPayload>(jwsPayloadText)\n  const isJwsPayloadValid = checkJwsPayload(jwsPayload)\n  if (!isJwsPayloadValid) return Promise.reject(false)\n \n  const fhirBundleJson = jwsPayload?.vc.credentialSubject.fhirBundle\n    \n  const recordType: RecordType = getRecordTypeFromPayload(jwsPayload as JWSPayload)\n  return fhirBundle.validate(recordType, fhirBundleJson)\n}\n\nfunction checkJwsPayload (jwsPayload: JWSPayload | undefined) {\n  if (!jwsPayload || typeof jwsPayload !== 'object') {\n    console.log('Failed to parse JWS.payload data as JSON.', ErrorCode.JSON_PARSE_ERROR)\n    return false\n  }\n  // validate issuance date\n  const nbf = new Date()\n  nbf.setTime(jwsPayload.nbf * 1000) // convert seconds to milliseconds\n  const now = new Date()\n\n  if (nbf > now) {\n    if (jwsPayload.nbf > new Date(2021, 1, 1).getTime()) {\n      // we will assume the nbf was encoded in milliseconds, and we will return an error\n      const dateParsedInMilliseconds = new Date()\n      dateParsedInMilliseconds.setTime(jwsPayload.nbf)\n      console.log(\n        `Health card is not yet valid, nbf=${jwsPayload.nbf} (${nbf.toUTCString()}).\\n` +\n          'nbf should be encoded in seconds since 1970-01-01T00:00:00Z UTC.\\n' +\n          `Did you encode the date in milliseconds, which would give the date: ${dateParsedInMilliseconds.toUTCString()}?`,\n        ErrorCode.NOT_YET_VALID,\n      )\n    } else {\n      console.log(\n        `Health card is not yet valid, nbf=${jwsPayload.nbf} (${nbf.toUTCString()}).`,\n        ErrorCode.NOT_YET_VALID,\n      )\n    }\n  }\n\n  if (\n    !jwsPayload.vc.type ||\n    !jwsPayload.vc.type.includes('https://smarthealth.cards#health-card')\n  ) {\n    console.log(\n      \"JWS.payload.vc.type should contain 'https://smarthealth.cards#health-card'\",\n      ErrorCode.SCHEMA_ERROR,\n    )\n    throw new InvalidError(  ErrorCode.SCHEMA_ERROR )\n  }\n\n  // to continue validation, we must have a FHIR bundle string to validate\n  if (\n    !jwsPayload.vc ||\n    !jwsPayload.vc.credentialSubject ||\n    !jwsPayload.vc.credentialSubject.fhirBundle\n  ) {\n    // The schema check above will list the expected properties/type\n    console.log(\n      'JWS.payload.vc.credentialSubject.fhirBundle{} required to continue.',\n      ErrorCode.CRITICAL_DATA_MISSING,\n    )\n    return false\n  }\n  return true\n}\n"],"mappings":"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"}