{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { RecordEntry } from 'verifier-sdk'\nimport type { JWS } from '../jws/types'\n\n\n\nexport type ParserFunction = (jwsPayload: JWSPayload) => RecordEntry[] | any | null\n\nexport type ValidateFunction = (entry: BundleEntry[]) => Promise<boolean>\n\nexport interface HealthCard {\n  verifiableCredential: JWS[]\n}\n\nexport interface JWSPayload {\n  iss: string\n  nbf: number\n  vc: {\n    type: string[]\n    credentialSubject: {\n      fhirBundle: FhirBundle\n    }\n  }\n}\nexport interface FhirBundle {\n  text?: string\n  Coding?: { display: unknown }\n  CodeableConcept?: { text: unknown }\n  meta?: unknown\n  id?: unknown\n  resourceType: string\n  type: string\n  entry: BundleEntry[]\n}\n\nexport interface BundleEntry {\n  id?: string\n  extension?: unknown[]\n  modifierExtension?: unknown[]\n  link?: string[]\n  fullUrl?: string\n  resource: Resource\n  search?: unknown\n  request?: unknown\n  response?: unknown\n  lotNumber?: unknown\n  performer?: unknown\n\n}\n\nexport type Resource = { \n  resourceType: string \n  subject?: any\n  code?: any\n  valueCodeableConcept?: any\n  status?: string\n  effectiveDateTime?: string\n  performer?: Array<Record<any, any>>\n  meta?: { security?: Array<{\n    system: string\n    code: string\n  }> } } & Record<string, unknown>\n\n\n\n\n\nexport interface  ObservationValidator {\n  /* this checks if observation system could be applied */\n  canSupport: (entry: BundleEntry) => boolean \n  validate: ( entry: BundleEntry ) => Promise<boolean>\n}\n\nexport interface ObservationParser {\n  parse: ( entry: BundleEntry ) => any\n}\n"],"mappings":""}