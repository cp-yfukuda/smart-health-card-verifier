{"version":3,"names":["immunizationValidator","labResultValidator","RecordType","validators","unknown","Promise","resolve","immunization","covid19LabResult","validateBundleForRecordType","recordType","fireBundle","res","Array","isArray","entry","_validators$recordTyp","call","undefined","error","console","info"],"sources":["index.ts"],"sourcesContent":["import type { FhirBundle } from '../types'\nimport immunizationValidator from './immunizationValidator'\nimport labResultValidator  from './labResultValidator'\nimport { RecordType } from '../fhirTypes'\nimport type { ValidateFunction } from '../types'\nconst validators: Record< RecordType, ValidateFunction> = {\n  [RecordType.unknown]: ()=>{ return Promise.resolve(false) },\n  [RecordType.immunization]: immunizationValidator,\n  [RecordType.covid19LabResult]: labResultValidator\n}\n\nexport default async function validateBundleForRecordType ( recordType: RecordType, fireBundle: FhirBundle  ): Promise< boolean>{\n  let res = false\n  if ( Array.isArray( fireBundle.entry )){\n    const entry = fireBundle.entry\n    try{ \n      res = await validators[recordType]?.call(undefined, entry) ?? false\n    } catch ( error ){\n      console.info( \"Validation Error: \"  + error )\n    }\n  }\n  return res\n}\n"],"mappings":"AACA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,kBAAkB,MAAO,sBAAsB;AACtD,SAASC,UAAU,QAAQ,cAAc;AAEzC,MAAMC,UAAiD,GAAG;EACxD,CAACD,UAAU,CAACE,OAAO,GAAG,MAAI;IAAE,OAAOC,OAAO,CAACC,OAAO,CAAC,KAAK,CAAC;EAAC,CAAC;EAC3D,CAACJ,UAAU,CAACK,YAAY,GAAGP,qBAAqB;EAChD,CAACE,UAAU,CAACM,gBAAgB,GAAGP;AACjC,CAAC;AAED,eAAe,eAAeQ,2BAA2BA,CAAGC,UAAsB,EAAEC,UAAsB,EAAsB;EAC9H,IAAIC,GAAG,GAAG,KAAK;EACf,IAAKC,KAAK,CAACC,OAAO,CAAEH,UAAU,CAACI,KAAK,CAAE,EAAC;IACrC,MAAMA,KAAK,GAAGJ,UAAU,CAACI,KAAK;IAC9B,IAAG;MAAA,IAAAC,qBAAA;MACDJ,GAAG,GAAG,SAAAI,qBAAA,GAAMb,UAAU,CAACO,UAAU,CAAC,cAAAM,qBAAA,uBAAtBA,qBAAA,CAAwBC,IAAI,CAACC,SAAS,EAAEH,KAAK,CAAC,MAAI,KAAK;IACrE,CAAC,CAAC,OAAQI,KAAK,EAAE;MACfC,OAAO,CAACC,IAAI,CAAE,oBAAoB,GAAIF,KAAK,CAAE;IAC/C;EACF;EACA,OAAOP,GAAG;AACZ"}