{"version":3,"names":["immunizationValidator","labResultValidator","RecordType","validators","unknown","Promise","resolve","immunization","covid19LabResult","validateBundleForRecordType","recordType","fireBundle","res","Array","isArray","entry","call","undefined","error","console","info"],"sources":["index.ts"],"sourcesContent":["import type { FhirBundle } from '../types'\nimport immunizationValidator from './immunizationValidator'\nimport labResultValidator  from './labResultValidator'\nimport { RecordType } from '../fhirTypes'\nimport type { ValidateFunction } from '../types'\nconst validators: Record< RecordType, ValidateFunction> = {\n  [RecordType.unknown]: ()=>{ return Promise.resolve(false) },\n  [RecordType.immunization]: immunizationValidator,\n  [RecordType.covid19LabResult]: labResultValidator\n}\n\nexport default async function validateBundleForRecordType ( recordType: RecordType, fireBundle: FhirBundle  ): Promise< boolean>{\n  let res = false\n  if ( Array.isArray( fireBundle.entry )){\n    const entry = fireBundle.entry\n    try{ \n      res = await validators[recordType]?.call(undefined, entry) ?? false\n    } catch ( error ){\n      console.info( \"Validation Error: \"  + error )\n    }\n  }\n  return res\n}\n"],"mappings":"AACA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,kBAAP,MAAgC,sBAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,MAAMC,UAAiD,GAAG;EACxD,CAACD,UAAU,CAACE,OAAZ,GAAsB,MAAI;IAAE,OAAOC,OAAO,CAACC,OAAR,CAAgB,KAAhB,CAAP;EAA+B,CADH;EAExD,CAACJ,UAAU,CAACK,YAAZ,GAA2BP,qBAF6B;EAGxD,CAACE,UAAU,CAACM,gBAAZ,GAA+BP;AAHyB,CAA1D;AAMA,eAAe,eAAeQ,2BAAf,CAA6CC,UAA7C,EAAqEC,UAArE,EAAiH;EAC9H,IAAIC,GAAG,GAAG,KAAV;;EACA,IAAKC,KAAK,CAACC,OAAN,CAAeH,UAAU,CAACI,KAA1B,CAAL,EAAuC;IACrC,MAAMA,KAAK,GAAGJ,UAAU,CAACI,KAAzB;;IACA,IAAG;MAAA;;MACDH,GAAG,GAAG,iCAAMT,UAAU,CAACO,UAAD,CAAhB,0DAAM,sBAAwBM,IAAxB,CAA6BC,SAA7B,EAAwCF,KAAxC,CAAN,MAAwD,KAA9D;IACD,CAFD,CAEE,OAAQG,KAAR,EAAe;MACfC,OAAO,CAACC,IAAR,CAAc,uBAAwBF,KAAtC;IACD;EACF;;EACD,OAAON,GAAP;AACD"}