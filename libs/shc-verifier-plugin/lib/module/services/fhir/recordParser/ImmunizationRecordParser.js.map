{"version":3,"names":["sortRecordByDateField","ResourceType","isResourceType","getVerifierInitOption","VerifierKey","cvxCodes","vaccineCodesHash","parse","jwsPayload","_jwsPayload$vc","_jwsPayload$vc$creden","_jwsPayload$vc$creden2","getAcceptedVaccineCodes","vaccinationData","entries","vc","credentialSubject","fhirBundle","entry","immunizationEntries","filter","Immunization","map","resource","getVaccineCodesHash","index","status","lotNumber","performer","vaccineCode","occurrenceDateTime","code","coding","isValidVaccinationCode","includes","isVaccineShotDone","toLowerCase","console","log","String","join","system","display","manufacturerName","groupDisplay","vaccinationDate","vaccinator","_performer$","_performer$$actor","actor","push","systemKey","systemCode","resourceType","vaccineName","groupName","info","JSON","stringify"],"sources":["ImmunizationRecordParser.ts"],"sourcesContent":["import { sortRecordByDateField } from '../../../utils/utils'\nimport { ResourceType, isResourceType } from '../fhirTypes'\nimport type { RecordEntry, VaccineCodeItemType } from 'parser-sdk'\nimport  { getVerifierInitOption, VerifierKey } from '../../../models/Config'\nimport type { JWSPayload, ParserFunction } from '../types'\n\nvar cvxCodes: string[] | null  = null\nvar vaccineCodesHash: { [key: string]: VaccineCodeItemType } =  {}\n\nconst parse: ParserFunction  = async (jwsPayload: JWSPayload): Promise< RecordEntry[] | null > => {\n  cvxCodes = cvxCodes || await getVerifierInitOption().getAcceptedVaccineCodes( VerifierKey ) \n  const vaccinationData: RecordEntry[] = []\n  const entries = jwsPayload?.vc?.credentialSubject?.fhirBundle?.entry\n\n  const immunizationEntries = entries\n    ?.filter((entry: any) => {\n      return isResourceType( entry, ResourceType.Immunization )\n    })\n    .map((entry: any) => entry.resource)\n\n  vaccineCodesHash = getVerifierInitOption().getVaccineCodesHash()\n  for (const [index, entry] of immunizationEntries.entries()) {\n    const { status, lotNumber, performer, vaccineCode, occurrenceDateTime } = entry\n    const { code } = vaccineCode?.coding[0]\n    const isValidVaccinationCode = code && cvxCodes.includes(code)\n    const isVaccineShotDone = ( status || '').toLowerCase() === 'completed'\n    if (!isValidVaccinationCode) {\n      console.log(\n        `Immunization.vaccineCode.code (${String(code)}) requires valid COVID-19 code (${String(cvxCodes.join(','))}).`,\n      )\n    }\n\n    if (!isVaccineShotDone) {\n      console.log(`Immunization.status should be \"completed\", but it is ${String(status)}`)\n    }\n    const { system, display, manufacturerName, groupDisplay } = vaccineCodesHash[code] || {}\n    const vaccinationDate = occurrenceDateTime\n\n    let vaccinator = ''\n    if (performer) {\n      vaccinator = performer[0]?.actor?.display || ''\n    }\n    if (isVaccineShotDone && isValidVaccinationCode) {\n      vaccinationData.push({\n        index: ( index + 1),\n        systemKey: system,\n        systemCode: code,\n        resourceType:ResourceType.Immunization,\n        lotNumber,\n        vaccinator,\n        vaccineName: display,\n        manufacturerName: manufacturerName || null,\n        groupName: groupDisplay,\n        vaccinationDate,\n      })\n    }\n  }\n  console.info(\"#YF--- vaccine data:\" + JSON.stringify( vaccinationData ))\n  sortRecordByDateField('vaccinationDate', vaccinationData)\n  return vaccinationData\n}\n\nexport default parse\n"],"mappings":"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"}