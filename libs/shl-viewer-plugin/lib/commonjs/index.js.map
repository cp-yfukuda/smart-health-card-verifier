{"version":3,"names":["getText","SHLViewer","constructor","option","shlLoader","SHLLoader","getTranslationFunction","canSupport","payloads","console","info","length","indexOf","protocol","Promise","resolve","reject","requestPassCode","setCustomViews","onEntered","number","onCancel","view","validate","bundle","validateSHL","error","SHLError","isError","ErrorCode","SHL_PASSCODE_NEEDED","passCode","fillerData","isValid","errorCode","issuedDate","Date","getTime","issuerData","iss","logo_uri","name","updated_at","url","recordType","patientData","dateOfBirth","names"],"sources":["index.tsx"],"sourcesContent":["import React from 'react'\nimport type { FHIRBundleType, IParserBase, BaseResponse, SetCustomViewType, \n    TranlateFunctionType, ParserInitOption } from 'parser-sdk'\nimport SHLLoader from './shlLoader';\nexport  * from './types'\nimport { SHLError, ErrorCode }  from './errors'\nimport PasscodeRequestView from './views/PasscodeRequestView'\n\n// type Manifest = {\n//   url: string \n//   key: string\n//   exp?: string\n//   flag?: string\n//   v?: string\n// }\n\nexport let getText: TranlateFunctionType\nexport class SHLViewer implements IParserBase {\n  shlLoader: SHLLoader\n\n  constructor ( option: ParserInitOption ) {\n    this.shlLoader = new SHLLoader();\n    getText = option.getTranslationFunction();\n  }\n  \n  canSupport( payloads: string[] ): Promise< IParserBase|null > {\n    console.info(\"#YF ----- SHL--------\")\n    if ( payloads.length > 0 &&\n         payloads[0].indexOf(this.shlLoader.protocol) >= 0 ) {\n       return Promise.resolve( this )\n    }\n    return Promise.reject(null)\n  }\n\n\n  async requestPassCode( setCustomViews: SetCustomViewType ): Promise<string|null> {\n    console.info(\"Requesting passcode\")\n    return new Promise(( resolve, reject ) => {\n      const onEntered = ( ( number: string | null ) => {\n        setCustomViews([])\n        resolve(number)\n      })\n      const onCancel = ()=> {\n        setCustomViews([])\n        reject(null)\n      }\n      const view = <PasscodeRequestView key={1} \n      onEntered={onEntered}\n      onCancel={onCancel} />\n      setCustomViews([view]);\n    })\n  }\n\n\n  async validate(payloads: string[], setCustomViews: SetCustomViewType ): Promise< null | BaseResponse > {\n    console.info(\"#YF ------------Validating.... \")\n    let bundle: FHIRBundleType[] | null  = null\n    try {\n      bundle = await this.shlLoader.validateSHL(payloads[0], null)\n    } catch ( error ) {\n      console.info(`error 1 ${error}`)\n      if( error instanceof SHLError  ) {\n        console.info(`error ${error}`)\n        if ( error.isError( ErrorCode.SHL_PASSCODE_NEEDED) ) {\n          /* #TODO Make it repeatable */\n          const passCode = await this.requestPassCode( setCustomViews )\n          if( passCode ) {\n            bundle = await this.shlLoader.validateSHL(payloads[0], passCode )\n          } \n\n        }\n      }\n      \n    }\n    /* #TODO find out where to get this */\n    const fillerData = {\n      isValid: true,\n      errorCode: 0,\n      issuedDate: new Date().getTime(),\n      issuerData: {\n        iss:\"NA\",\n        logo_uri: \"NA\",\n        name: \"NA\",\n        updated_at: new Date().getTime(),\n        url: \"NA\"\n      },\n      recordType: \"IPS\",\n      patientData: {\n        dateOfBirth: \"00/00/00\",\n        names: [\"test\"]\n      }\n\n    }\n    return Promise.resolve( bundle ? { ...fillerData, bundle } : null )\n  }\n\n}\n"],"mappings":"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"}