{"version":3,"names":["_react","_interopRequireDefault","require","_shlLoader","_types","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","_errors","_PasscodeRequestView","obj","__esModule","default","_defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","getText","SHLViewer","constructor","option","shlLoader","SHLLoader","getTranslationFunction","canSupport","payloads","length","indexOf","protocol","Promise","resolve","reject","requestPassCode","setCustomViews","onEntered","number","onCancel","view","createElement","console","info","JSON","stringify","validate","bundle","validateSHL","error","SHLError","isError","ErrorCode","SHL_PASSCODE_NEEDED","passCode","fillerData","isValid","errorCode","issuedDate","Date","getTime","issuerData","iss","logo_uri","name","updated_at","url","recordType","patientData","dateOfBirth","names"],"sources":["index.tsx"],"sourcesContent":["import React from 'react'\nimport type { FHIRBundleType, IParserBase, BaseResponse, SetCustomViewType, \n    TranlateFunctionType, ParserInitOption } from 'parser-sdk'\nimport SHLLoader from './shlLoader';\nexport  * from './types'\nimport { SHLError, ErrorCode }  from './errors'\nimport PasscodeRequestView from './views/PasscodeRequestView'\n// type Manifest = {\n//   url: string \n//   key: string\n//   exp?: string\n//   flag?: string\n//   v?: string\n// }\n\nexport let getText: TranlateFunctionType\nexport class SHLViewer implements IParserBase {\n  shlLoader: SHLLoader\n\n  constructor ( option: ParserInitOption ) {\n    this.shlLoader = new SHLLoader();\n    getText = option.getTranslationFunction();\n  }\n  \n  canSupport( payloads: string[] ): Promise< IParserBase|null > {\n    if ( payloads.length > 0 &&\n         payloads[0].indexOf(this.shlLoader.protocol) >= 0 ) {\n       return Promise.resolve( this )\n    }\n    return Promise.reject(null)\n  }\n\n\n  async requestPassCode( setCustomViews: SetCustomViewType ): Promise<string|null> {\n    return new Promise(( resolve, reject ) => {\n      const onEntered = ( ( number: string | null ) => {\n        setCustomViews([])\n        resolve(number)\n      })\n      const onCancel = ()=> {\n        setCustomViews([])\n        reject(null)\n      }\n      const view = <PasscodeRequestView key={1} \n      onEntered={onEntered}\n      onCancel={onCancel} />\n      console.info(\"#YF Requesting with\" + JSON.stringify([view]))\n      setCustomViews([view]);\n    })\n  }\n\n\n  async validate(payloads: string[], setCustomViews: SetCustomViewType ): Promise< null | BaseResponse > {\n    let bundle: FHIRBundleType[] | null  = null\n    try {\n      bundle = await this.shlLoader.validateSHL(payloads[0], null)\n    } catch ( error ) {\n      console.info(`error 1 ${error}`)\n      if( error instanceof SHLError  ) {\n        console.info(`error ${error}`)\n        if ( error.isError( ErrorCode.SHL_PASSCODE_NEEDED) ) {\n          /* #TODO Make it repeatable */\n          const passCode = await this.requestPassCode( setCustomViews )\n          if( passCode ) {\n            bundle = await this.shlLoader.validateSHL(payloads[0], passCode )\n          } \n\n        }\n      }\n      \n    }\n    /* #TODO find out where to get this */\n    const fillerData = {\n      isValid: true,\n      errorCode: 0,\n      issuedDate: new Date().getTime(),\n      issuerData: {\n        iss:\"NA\",\n        logo_uri: \"NA\",\n        name: \"NA\",\n        updated_at: new Date().getTime(),\n        url: \"NA\"\n      },\n      recordType: \"IPS\",\n      patientData: {\n        dateOfBirth: \"00/00/00\",\n        names: [\"test\"]\n      }\n\n    }\n    return Promise.resolve( bundle ? { ...fillerData, bundle } : null )\n  }\n\n}\n"],"mappings":"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"}