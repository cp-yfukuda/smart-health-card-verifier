{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { ParserInitOption, VaccineCodeItemType, TranlateFunctionType } from 'parser-sdk'\n\n\ntype ValidateIssuerReturnType = any | null;\nexport interface ValidateIssuerFunction<T = unknown> {\n  ( verifierKey: string, issuer: T ): ValidateIssuerReturnType;\n}\n\nexport interface AsyncIssuerValidateFunction<T = unknown> extends ValidateIssuerFunction<T> {\n  (...args: Parameters<ValidateIssuerFunction<T>>): Promise< ValidateIssuerReturnType >;\n  $async: true;\n}\n\nexport declare type AnyIssuerValidateFunction<T = any> = ValidateIssuerFunction<T> | AsyncIssuerValidateFunction<T>;\n\ntype CodesReturnType = string [];\n\n\nexport interface GetGetAcceptedVaccineCodesFunction {\n  ( verifierKey: string ): CodesReturnType;\n}\n\nexport interface AsyncGetAcceptedVaccineFunction extends GetGetAcceptedVaccineCodesFunction {\n  (...args: Parameters<ValidateIssuerFunction>): Promise< CodesReturnType >;\n  $async: true;\n}\n\nexport declare type AnyGetAcceptedVaccineCodesFunction<T = any> = GetGetAcceptedVaccineCodesFunction | AsyncGetAcceptedVaccineFunction;\n\n\n\nexport interface useLegacyFunction{\n  ( system: string, code: string ): boolean\n} \n\nexport interface isAcceptedLabResult{\n  ( system: string, code: string ): boolean\n} \n\nexport interface getIsSmallScreenFunction{\n  ():boolean\n} \n\nexport interface getAcceptedSystemCodeFunction{\n ( system: string, code: string ): any | null\n}\n\nexport interface getSystemCodeLabelFunction {\n  ( system: string, code: string ): string | null \n}\n\nexport interface getVaccineCodesHashFunction{\n  (): { [key: string]: VaccineCodeItemType }\n}\n\n\nexport interface getTranslationFunction{\n  (): TranlateFunctionType\n} \n\nexport type SHLViewerOption = ParserInitOption;\n\nexport type ManifestItemType = {\n    contentType: string\n    location?: string\n    embedded?: string\n}\n\nexport type ManifestType = {\n    files: ManifestItemType[]\n}\n"],"mappings":""}